package dev.cele.asa_sm.ui.components.server_tab_accordions;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import dev.cele.asa_sm.dto.AsaServerConfigDto;
import dev.cele.asa_sm.ui.components.AccordionTopBar;

import javax.swing.*;
import java.awt.*;

public class ChatAndNotificationsAccordion {
    private JCheckBox enableGlobalVoiceChatCheckBox;
    private JCheckBox enablePlayerLeftNotificationsCheckBox;
    private JCheckBox enableProximityTextChatCheckBox;
    private JCheckBox enablePlayerJoinedNotificationsCheckBox;
    private JPanel contentPane;

    private AsaServerConfigDto configDto;

    public ChatAndNotificationsAccordion(AsaServerConfigDto configDto) {
        this.configDto = configDto;

        SwingUtilities.invokeLater(this::afterInit);
    }

    private void afterInit() {
        enableGlobalVoiceChatCheckBox.setSelected(
                configDto.getGameUserSettingsINI().getServerSettings().getGlobalVoiceChat()
        );
        enableGlobalVoiceChatCheckBox.addActionListener(e ->
                configDto.getGameUserSettingsINI().getServerSettings().setGlobalVoiceChat(enableGlobalVoiceChatCheckBox.isSelected())
        );

        enablePlayerLeftNotificationsCheckBox.setSelected(
                configDto.getGameUserSettingsINI().getServerSettings().getAlwaysNotifyPlayerLeft()
        );
        enablePlayerLeftNotificationsCheckBox.addActionListener(e ->
                configDto.getGameUserSettingsINI().getServerSettings().setAlwaysNotifyPlayerLeft(enablePlayerLeftNotificationsCheckBox.isSelected())
        );

        enableProximityTextChatCheckBox.setSelected(
                configDto.getGameUserSettingsINI().getServerSettings().getProximityChat()
        );
        enableProximityTextChatCheckBox.addActionListener(e ->
                configDto.getGameUserSettingsINI().getServerSettings().setProximityChat(enableProximityTextChatCheckBox.isSelected())
        );

        enablePlayerJoinedNotificationsCheckBox.setSelected(
                !configDto.getGameUserSettingsINI().getServerSettings().getDontAlwaysNotifyPlayerJoined()
        );
        enablePlayerJoinedNotificationsCheckBox.addActionListener(e ->
                configDto.getGameUserSettingsINI().getServerSettings().setDontAlwaysNotifyPlayerJoined(
                        !enablePlayerJoinedNotificationsCheckBox.isSelected()
                )
        );
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, BorderLayout.CENTER);
        enableGlobalVoiceChatCheckBox = new JCheckBox();
        enableGlobalVoiceChatCheckBox.setText("Enable Global Voice Chat");
        panel1.add(enableGlobalVoiceChatCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        enablePlayerLeftNotificationsCheckBox = new JCheckBox();
        enablePlayerLeftNotificationsCheckBox.setText("Enable 'Player Left' Notifications");
        panel1.add(enablePlayerLeftNotificationsCheckBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        enableProximityTextChatCheckBox = new JCheckBox();
        enableProximityTextChatCheckBox.setText("Enable Proximity Text Chat");
        panel1.add(enableProximityTextChatCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        enablePlayerJoinedNotificationsCheckBox = new JCheckBox();
        enablePlayerJoinedNotificationsCheckBox.setText("Enable 'Player Joined' Notifications");
        panel1.add(enablePlayerJoinedNotificationsCheckBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final AccordionTopBar accordionTopBar1 = new AccordionTopBar();
        accordionTopBar1.setExpanded(true);
        accordionTopBar1.setTitle("Chat and Notifications");
        contentPane.add(accordionTopBar1, BorderLayout.NORTH);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
