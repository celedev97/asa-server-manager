package dev.cele.asa_sm.ui.frames;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import dev.cele.asa_sm.Const;
import dev.cele.asa_sm.config.SpringApplicationContext;
import dev.cele.asa_sm.services.SettingsService;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.SneakyThrows;
import org.apache.commons.lang3.StringUtils;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class SettingsDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonSave;
    private JButton buttonCancel;
    private JComboBox<Theme> themeComboBox;
    private JButton buttonApply;

    private final SettingsService settingsService = SpringApplicationContext.autoWire(SettingsService.class);
    private final ObjectMapper objectMapper = SpringApplicationContext.autoWire(ObjectMapper.class);

    @SneakyThrows
    public SettingsDialog(JFrame parent) {
        super(parent, "Settings", true);

        setContentPane(contentPane);
        getRootPane().setDefaultButton(buttonSave);

        buttonApply.addActionListener(e -> save());
        buttonSave.addActionListener(e -> {
            save();
            dispose();
        });
        buttonCancel.addActionListener(e -> cancel());

        //getting themes from classpath in folder dev/cele/asa_sm/ui/themes

        var resolver = new PathMatchingResourcePatternResolver(getClass().getClassLoader());
        var resources = resolver.getResources("classpath:/dev/cele/asa_sm/themes/*.theme.json");

        for (var resource : resources) {
            //save path only as /dev/cele/asa_sm/themes/stuff.theme.json
            var path = resource.getURL().toString();
            path = "classpath:" + path.substring(path.indexOf("/dev/cele/asa_sm/themes/"));

            var theme = new Theme();

            theme.setPath(path);

            try {
                var themeJson = SpringApplicationContext.autoWire(ObjectMapper.class).readTree(
                        getClass().getClassLoader().getResourceAsStream(path)
                );
                theme.setName(themeJson.get("name").asText());
            } catch (Exception e) {
                theme.setName(
                        StringUtils.capitalize(
                                path.substring(path.lastIndexOf("/") + 1).replace(".theme.json", "")
                        )
                );
            }

            themeComboBox.addItem(theme);
        }

        //adding manual themes from the themes folder
        if (Const.THEME_DIR.toFile().exists() && Const.THEME_DIR.toFile().isDirectory()) {
            for (var file : Const.THEME_DIR.toFile().listFiles()) {
                if (file.getName().endsWith(".theme.json")) {
                    var theme = objectMapper.readValue(file, Theme.class);
                    theme.setPath(file.getAbsolutePath());
                    theme.setName(file.getName());
                    themeComboBox.addItem(theme);
                }
            }
        }

        //set selected theme
        var selectedTheme = settingsService.getSettings().getTheme();
        for (int i = 0; i < themeComboBox.getItemCount(); i++) {
            var theme = themeComboBox.getItemAt(i);
            if (theme.getPath().equals(selectedTheme)) {
                themeComboBox.setSelectedIndex(i);
                break;
            }
        }

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                cancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(
                e -> cancel(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );


        setMinimumSize(new Dimension(350, 200));
        pack();
        setLocationRelativeTo(parent);
    }

    private void save() {
        settingsService.getSettings().setTheme(((Theme) themeComboBox.getSelectedItem()).getPath());

        settingsService.save();
    }

    private void cancel() {
        dispose();
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonSave = new JButton();
        buttonSave.setText("Save");
        panel2.add(buttonSave, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonApply = new JButton();
        buttonApply.setText("Apply");
        panel2.add(buttonApply, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPane.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane1.setViewportView(panel3);
        final JLabel label1 = new JLabel();
        label1.setText("Theme");
        panel3.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        themeComboBox = new JComboBox();
        panel3.add(themeComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}

@Data @NoArgsConstructor
class Theme{
    private String name;
    private String path;

    @Override
    public String toString() {
        return name;
    }

}
